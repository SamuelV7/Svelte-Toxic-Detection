{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ToxicityDetector.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import ToxicityDetector from './ToxicityDetector.svelte'\n  export let name = \"Toxicity Detection\";\n  import {\n    MDBBtn,\n    MDBCard,\n    MDBCardBody,\n    MDBCardImage,\n    MDBCardTitle,\n    MDBCardText,\n    MDBCol,\n    MDBContainer,\n  } from \"mdbsvelte\";\n//import ToxicModel from './ToxicModel.svelte';\n</script>\n\n\n<main>\n  <h1>{name}!</h1>\n  <p>Detect Toxicity of the sentence!</p>\n  <!-- <p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p> -->\n</main>\n\n<!-- <MDBContainer>\n\t<MDBBtn>Click Me</MDBBtn>\n</MDBContainer> -->\n\n<MDBCol>\n  <MDBCard color=\"\">\n    <MDBCardBody>\n      <MDBContainer>\n\t\t  <ToxicityDetector/>\n      </MDBContainer>\n    </MDBCardBody>\n  </MDBCard>\n</MDBCol>\n\n<style>\n\t/* #test{\n\t\t  margin: auto;\n\t\t  color: aliceblue;\n\t\t  align-self: center;\n\t  } */\n\n\tmain {\n\t  text-align: center;\n\t  padding: 1em;\n\t  max-width: 240px;\n\t  margin: 0 auto;\n\t}\n  \n\th1 {\n\t  color: #393e46;\n\t  text-transform: uppercase;\n\t  font-size: 4em;\n\t  font-weight: 100;\n\t}\n  \n\t@media (min-width: 640px) {\n\t  main {\n\t\tmax-width: none;\n\t  }\n\t}\n  </style>\n  \n",
    "<script>\n  import { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbsvelte\";\n  import \"@tensorflow/tfjs\";\n  import * as toxicity from \"@tensorflow-models/toxicity\";\n\n  let userSentence = \"\";\n  const threshold = 0.85;\n\n  async function modelPrediction() {\n    console.log(userSentence);\n    let inputSentence = [userSentence];\n    const model = await toxicity.load(threshold);\n    const prediction = await model.classify(inputSentence);\n    console.log(prediction);\n    return prediction;\n  }\n  let promise = Promise.resolve();\n  function handleClick() {\n    promise = modelPrediction();\n    return promise;\n  }\n</script>\n\n<style>\n  ul {\n    color: #00adb5;\n  }\n</style>\n\n<div>\n<textarea bind:value={userSentence} class=\"textArea\" cols=\"75\" />\n<button on:click={handleClick}>Click To Classify</button>\n{#await promise}\n  <p>Waiting.....</p>\n{:then model1}\n  {console.log(model1)}\n  {#if model1 != undefined}\n  <div>\n    <ul>Identity Attack: {model1[0].results[0].match}</ul>\n    <ul>Insult: {model1[1].results[0].match}</ul>\n    <ul>Obscene: {model1[2].results[0].match}</ul>\n    <ul>Severe Toxicity: {model1[3].results[0].match}</ul>\n    <ul>Sexually Explicit: {model1[4].results[0].match}</ul>\n    <ul>Threat: {model1[5].results[0].match}</ul>\n    <ul>Toxicity: {model1[6].results[0].match}</ul>\n  </div>\n  {/if}\n{:catch error}\n  console.log(error)\n{/await}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA4CC,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACP,SAAS,CAAE,IAAI,AACd,CAAC,AACH,CAAC;ACtCA,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO,AAChB,CAAC"
}